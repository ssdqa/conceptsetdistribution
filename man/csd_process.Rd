% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/csd_process.R
\name{csd_process}
\alias{csd_process}
\title{Concept Set Distribution}
\usage{
csd_process(
  cohort,
  domain_tbl = conceptsetdistribution::csd_domain_file,
  concept_set = conceptsetdistribution::csd_concept_set,
  omop_or_pcornet,
  multi_or_single_site = "single",
  anomaly_or_exploratory = "exploratory",
  num_concept_combined = FALSE,
  num_concept_1 = 30,
  num_concept_2 = 30,
  p_value = 0.9,
  age_groups = FALSE,
  time = FALSE,
  time_span = c("2012-01-01", "2020-01-01"),
  time_period = "year"
)
}
\arguments{
\item{cohort}{\emph{tabular input} | cohort for SQUBA testing; required fields:
\itemize{
\item \code{site} | \emph{character}
\item \code{person_id} | \code{patid} | \emph{integer} / \emph{character}
\item \code{start_date} | \emph{date}
\item \code{end_date} | \emph{date}
}}

\item{domain_tbl}{\emph{tabular input} | input table defining the domains listed in the annotated concept set
four columns:
- \code{domain} the name of the CDM table associated with the concept; should match what is listed in the annotated concept set
- \code{concept_field} the name of the field in the domain table where the concepts are located
- \code{date_field} the name of the field in the domain table with the date that should be used for time-based filtering
- \code{vocabulary_field} PCORnet only; set to NA}

\item{concept_set}{\emph{tabular input} | an annotated concept set CSV file with the following columns:
\itemize{
\item \code{concept_id} | \emph{integer} |  required for OMOP; the concept_id of interest
\item \code{concept_code} | \emph{character} | required for PCORnet; the code of interest
\item \code{concept_name} | \emph{character} | optional; the descriptive name of the concept
\item \code{vocabulary_id} | \emph{character} | required for PCORnet; the vocabulary of the code - should match what is listed in the domain table's vocabulary_field
\item \code{variable} | \emph{character} | required; a string label grouping one concept code into a larger variable definition
\item \code{domain} | \emph{character} | required; the name of the CDM table where the concept is stored - multiple domains can be included in the file, but only one domain should be listed per row
}}

\item{omop_or_pcornet}{\emph{string} | Option to run the function using the OMOP or PCORnet CDM as the default CDM
\itemize{
\item \code{omop}: run the \code{\link[=csd_process_omop]{csd_process_omop()}} function against an OMOP CDM instance
\item \code{pcornet}: run the \code{\link[=csd_process_pcornet]{csd_process_pcornet()}} function against a PCORnet CDM instance
}}

\item{multi_or_single_site}{\emph{string} | Option to run the function on a single vs multiple sites
\itemize{
\item \code{single}: run the function for a single site
\item \code{multi}: run the function for multiple sites
}}

\item{anomaly_or_exploratory}{\emph{string} | Option to conduct an exploratory or anomaly detection analysis. Exploratory analyses give a high
level summary of the data to examine the fact representation within the cohort. Anomaly detection
analyses are specialized to identify outliers within the cohort.}

\item{num_concept_combined}{\emph{boolean} | when \code{multi_or_single_site} = \code{single} and \code{anomaly_or_exploratory} = \code{anomaly},
this argument is a boolean that will ensure that \code{concept1} and \code{concept2} meet some minimal threshold for including in the jaccard index
if \code{TRUE}, then \emph{both} conditions for \code{num_concept_1} and \code{num_concept_2} should be met; if \code{FALSE} then just one condition needs to be met.}

\item{num_concept_1}{\emph{integer} | when \code{multi_or_single_site} = \code{single} and \code{anomaly_or_exploratory} = \code{anomaly},
this argument is an integer and requires a minimum number of times that the \emph{first} concept appears in the dataset}

\item{num_concept_2}{\emph{integer} | when \code{multi_or_single_site} = \code{single} and \code{anomaly_or_exploratory} = \code{anomaly},
this argument is an integer and requires a minimum number of times that the \emph{second} concept appears in the dataset}

\item{p_value}{\emph{numeric} | the p value to be used as a threshold in the multi-site anomaly detection analysis}

\item{age_groups}{\emph{tabular input} | If you would like to stratify the results by age group,  create a table or CSV file with the following
columns and include it as the \code{age_groups} function parameter:
\itemize{
\item \code{min_age} | \emph{integer} | the minimum age for the group (i.e. 10)
\item \code{max_age} | \emph{integer} | the maximum age for the group (i.e. 20)
\item \code{group} | \emph{character} | a string label for the group (i.e. 10-20, Young Adult, etc.)
}

If you would \emph{not} like to stratify by age group, leave the argument as NULL}

\item{time}{\emph{boolean} | logical to determine whether to output the check across time}

\item{time_span}{\emph{vector - length 2} | when time = TRUE, a vector of two dates for the observation period of the study}

\item{time_period}{\emph{string} | when time = TRUE, this argument defines the distance between dates within the specified time period. defaults
to \code{year}, but other time periods such as \code{month} or \code{week} are also acceptable}
}
\value{
a dataframe summarizing the distribution of code usage for each user defined variable
}
\description{
This is an information representation module that will compute the distribution of concept usage in a
user-provided annotated concept set. The user will define the domains of interest (\code{domain_tbl}) and
provide the concept set to be evaluated (\code{concept_set}). Sample versions of these inputs are
included as data in the package and are accessible with \verb{conceptsetdistribution::}.
Results can optionally be stratified by site, age group, and/or time.
This function is compatible with both the OMOP and the PCORnet CDMs based on the
user's selection.
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'conceptsetdistribution'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'csd_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'conceptsetdistribution'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000),
                #RSQLite does not store date objects,
                #hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Prepare input tables
csd_domain_tbl <- dplyr::tibble(domain = 'condition_occurrence',
                                concept_field = 'condition_concept_id',
                                date_field = 'condition_start_date',
                                vocabulary_field = NA)

csd_concept_tbl <- read_codeset('dx_hypertension') \%>\%
  dplyr::mutate(domain = 'condition_occurrence',
                variable = 'hypertension')

#' Execute `csd_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
csd_process_example <- csd_process(cohort = cohort,
                                   multi_or_single_site = 'single',
                                   anomaly_or_exploratory = 'exploratory',
                                   time = FALSE,
                                   omop_or_pcornet = 'omop',
                                   domain_tbl = csd_domain_tbl,
                                   concept_set = csd_concept_tbl)

csd_process_example

#' Execute `csd_output` function
csd_output_example <- csd_output(process_output = csd_process_example,
                                 concept_set = csd_concept_tbl,
                                 vocab_tbl = NULL)

csd_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_squba()`

make_interactive_squba(csd_output_example[[1]])
}
